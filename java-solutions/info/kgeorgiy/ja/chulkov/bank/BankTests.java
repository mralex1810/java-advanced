package info.kgeorgiy.ja.chulkov.bank;

import static info.kgeorgiy.ja.chulkov.bank.Server.BANK;

import info.kgeorgiy.ja.chulkov.bank.account.Account;
import info.kgeorgiy.ja.chulkov.bank.account.AccountImpl;
import info.kgeorgiy.ja.chulkov.bank.account.NegativeAccountAmountAfterOperation;
import info.kgeorgiy.ja.chulkov.bank.person.LocalPerson;
import info.kgeorgiy.ja.chulkov.bank.person.PersonData;
import info.kgeorgiy.ja.chulkov.bank.person.RemotePerson;
import java.io.IOException;
import java.net.ServerSocket;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.server.UnicastRemoteObject;
import java.text.NumberFormat;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.function.Function;
import java.util.stream.IntStream;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.JVM)
public class BankTests {

    private static final List<PersonData> PERSON_DATA = List.of(
            new PersonData("–ì–µ–æ—Ä–≥–∏–π", "–ö–æ—Ä–Ω–µ–µ–≤", "105590"),
            new PersonData("–ì–µ–æ—Ä–≥–∏–π", "–ù–∞–∑–∞—Ä–æ–≤", "242216"),
            new PersonData("–î–æ–Ω–∞—Ç", "–°–æ–∫–æ–ª–æ–≤", "242555"),
            new PersonData("–ê–Ω–∞—Å—Ç–∞—Å–∏—è", "–¢—É—à–∫–∞–Ω–æ–≤–∞", "284669"),
            new PersonData("ÿ¨Ÿàÿ±ÿ¨", "ŸÉŸàÿ±ŸÜŸäŸäŸÅ", "‡ßß‡ß¶‡ß´‡ß´‡ßÆ‡ß¶"),
            new PersonData("üëâüëåü§òüëà", "üë∂üßíüë¶üßëüßëüë©‚Äçü¶≤", "1‚É£0‚É£5‚É£5‚É£9‚É£0‚É£")
    );

    private static final List<String> ACCOUNTS = List.of(
            "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≠–í–ú",
            "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "ÿ¨ÿßŸÅÿß ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©",
            "üòÜü§£ü§£ü§£üîûüîû"
    );
    private static final Random random = new Random(42);
    private Bank bank;

    public static void main(final String[] args) {
        final Result result = new JUnitCore().run(BankTests.class);
        if (!result.wasSuccessful()) {
            System.exit(1);
        } else {
            System.exit(0);
        }
    }

    @BeforeClass
    public static void setupRegistry() throws IOException {
        final var registry = LocateRegistry.createRegistry(1099);
    }

    private static int getFreePort() throws IOException {
        try (final ServerSocket serverSocket = new ServerSocket(0)) {
            final int ans = serverSocket.getLocalPort();
            if (ans == 0) {
                throw new RuntimeException("Must have a free port");
            }
            return ans;
        }
    }

    private static String getAccountId(final PersonData personData, final String accountId) {
        return personData.passport() + ":" + accountId;
    }

    @Before
    public void setupBank() throws IOException, NotBoundException {
        final var bankPort = getFreePort();
        bank = new RemoteBank(bankPort);
        try {
            UnicastRemoteObject.exportObject(bank, bankPort);
            Naming.rebind(BANK, bank);
            bank = (Bank) Naming.lookup(BANK);
            System.out.println("Server started");
        } catch (final RemoteException e) {
            System.out.println("Cannot export object: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }


    @Test
    public void accountAmountTest() throws NegativeAccountAmountAfterOperation, RemoteException {
        final String kgeorgiy = "kgeorgiy";
        final var account = new AccountImpl(kgeorgiy);
        Assert.assertEquals(account.getAmount(), 0);
        Assert.assertEquals(account.getId(), kgeorgiy);
        checkSetAmount(account, 10);
        checkSetAmount(account, 1000);
        checkSetAmount(account, 100000);
        checkSetAmount(account, 552552);
        checkSetAmount(account, Integer.MAX_VALUE);
        checkSetAmount(account, 0);
        Assert.assertEquals(account.getId(), kgeorgiy);
    }

    private void checkSetAmount(final Account account, final int amount)
            throws NegativeAccountAmountAfterOperation, RemoteException {
        account.setAmount(amount);
        Assert.assertEquals(amount, account.getAmount());
    }

    @Test(expected = NegativeAccountAmountAfterOperation.class)
    public void accountAmountNonNegativeTest() throws NegativeAccountAmountAfterOperation, RemoteException {
        final String kgeorgiy = "kgeorgiy";
        final var account = new AccountImpl(kgeorgiy);
        checkSetAmount(account, -1);
        Assert.fail();
    }

    @Test
    public void newPersonTest() throws RemoteException {
        for (final var personData : PERSON_DATA) {
            final RemotePerson person = bank.createPerson(personData);
            checkPerson(person, personData);
        }
    }

    @Test
    public void withoutPersonTest() throws RemoteException {
        for (final var personData : PERSON_DATA.subList(0, PERSON_DATA.size() / 2)) {
            final RemotePerson person = bank.createPerson(personData);
            checkPerson(person, personData);
        }
        for (final var personData : PERSON_DATA.subList(PERSON_DATA.size() / 2, PERSON_DATA.size())) {
            Assert.assertNull(bank.getRemotePerson(personData.passport()));
            Assert.assertNull(bank.getLocalPerson(personData.passport()));
        }
    }

    @Test
    public void localPersonGetTest() throws RemoteException {
        for (final var personData : PERSON_DATA) {
            bank.createPerson(personData);
            final LocalPerson person = bank.getLocalPerson(personData.passport());
            checkPerson(person, personData);
        }
    }

    @Test
    public void createAccountTest() throws RemoteException {
        for (final var personData : PERSON_DATA) {
            for (final var accountId : ACCOUNTS) {
                final RemotePerson person = bank.createPerson(personData);
                final var account = person.createAccount(accountId);
                Assert.assertEquals(account.getId(), getAccountId(personData, accountId));
                Assert.assertEquals(account.getAmount(), 0);
            }
        }
        for (final var personData : PERSON_DATA) {
            final RemotePerson person = bank.getRemotePerson(personData.passport());
            for (final var accountId : ACCOUNTS) {
                Assert.assertNotNull(person.getAccount(accountId));
            }
        }
    }

    @Test
    public void randomAmountSetTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        for (final var personData : PERSON_DATA) {
            for (final var accountId : ACCOUNTS) {
                final RemotePerson person = bank.createPerson(personData);
                final var account = person.createAccount(accountId);
                checkSetAmount(account, random.nextInt(0, Integer.MAX_VALUE));
                checkSetAmount(account, random.nextInt(0, Integer.MAX_VALUE));
            }
        }
    }

    private void twoSequentialPersonForOneTest(
            final RemoteFunction<String, RemotePerson> gen1,
            final RemoteFunction<String, RemotePerson> gen2,
            final Function<Integer, Integer> expected) throws RemoteException, NegativeAccountAmountAfterOperation {
        for (final var personData : PERSON_DATA) {
            bank.createPerson(personData);
            for (final var accountId : ACCOUNTS) {
                final var account1 = gen1.apply(personData.passport()).createAccount(accountId);
                final int set = random.nextInt(1, Integer.MAX_VALUE);
                checkSetAmount(account1, set);
                final var account2 = gen2.apply(personData.passport()).getAccount(accountId);
                final var ans = expected.apply(set);
                if (ans != null) {
                    Assert.assertNotNull(account2);
                    Assert.assertEquals(account2.getAmount(), ans.intValue());
                } else {
                    Assert.assertNull(account2);
                }
            }
        }
    }

    private void twoParallelPersonForOneTest(
            final RemoteFunction<String, RemotePerson> gen1,
            final RemoteFunction<String, RemotePerson> gen2,
            final Function<Integer, Integer> expected) throws RemoteException, NegativeAccountAmountAfterOperation {
        for (final var personData : PERSON_DATA) {
            bank.createPerson(personData);
            for (final var accountId : ACCOUNTS) {
                final var account1 = gen1.apply(personData.passport()).createAccount(accountId);
                final var account2 = gen2.apply(personData.passport()).getAccount(accountId);
                final int set = random.nextInt(1, Integer.MAX_VALUE);
                checkSetAmount(account1, set);
                final var ans = expected.apply(set);
                if (ans != null) {
                    Assert.assertNotNull(account2);
                    Assert.assertEquals(account2.getAmount(), ans.intValue());
                } else {
                    Assert.assertNull(account2);

                }
            }
        }
    }

    @Test
    public void twoLocalSeqTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoSequentialPersonForOneTest(bank::getLocalPerson, bank::getLocalPerson, (set) -> null);
    }

    @Test
    public void twoLocalParTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoParallelPersonForOneTest(bank::getLocalPerson, bank::getLocalPerson, (set) -> null);
    }

    @Test
    public void twoRemoteSeqTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoSequentialPersonForOneTest(bank::getRemotePerson, bank::getRemotePerson, (set) -> set);
    }

    @Test
    public void twoRemoteParTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoParallelPersonForOneTest(bank::getRemotePerson, bank::getRemotePerson, (set) -> set);
    }

    @Test
    public void RemoteAndLocalSeqTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoSequentialPersonForOneTest(bank::getRemotePerson, bank::getLocalPerson, (set) -> set);
    }

    @Test
    public void RemoteAndLocalParTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoParallelPersonForOneTest(bank::getRemotePerson, bank::getLocalPerson, (set) -> 0);
    }


    @Test
    public void LocalAndRemoteSeqTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoSequentialPersonForOneTest(bank::getLocalPerson, bank::getRemotePerson, (set) -> null);
    }

    @Test
    public void LocalAndRemoteParTest() throws RemoteException, NegativeAccountAmountAfterOperation {
        twoParallelPersonForOneTest(bank::getLocalPerson, bank::getRemotePerson, (set) -> null);
    }

    private void checkPerson(final RemotePerson person, final PersonData personData) throws RemoteException {
        Assert.assertEquals(person.getFirstName(), personData.firstName());
        Assert.assertEquals(person.getSecondName(), personData.secondName());
        Assert.assertEquals(person.getPassport(), personData.passport());
    }

    @Test
    public void twoSeqBanksTest() throws IOException, NotBoundException {
        for (final var personData : PERSON_DATA) {
            bank.createPerson(personData);
        }
        for (final var personData : PERSON_DATA) {
            Assert.assertNotNull(bank.getRemotePerson(personData.passport()));
        }
        setupBank();
        for (final var personData : PERSON_DATA) {
            Assert.assertNull(bank.getRemotePerson(personData.passport()));
            Assert.assertNull(bank.getLocalPerson(personData.passport()));
        }
    }

    @Test
    public void twoParallelBanksTest() throws IOException, NotBoundException {
        final Bank bank1 = bank;
        setupBank();
        final Bank bank2 = bank;
        for (final var personData : PERSON_DATA.subList(0, PERSON_DATA.size() / 2)) {
            checkPerson(bank1.createPerson(personData), personData);
        }
        for (final var personData : PERSON_DATA.subList(PERSON_DATA.size() / 2, PERSON_DATA.size())) {
            checkPerson(bank2.createPerson(personData), personData);
        }
        for (final var personData : PERSON_DATA.subList(0, PERSON_DATA.size() / 2)) {
            Assert.assertNotNull(bank1.getRemotePerson(personData.passport()));
            Assert.assertNull(bank2.getRemotePerson(personData.passport()));
        }
        for (final var personData : PERSON_DATA.subList(PERSON_DATA.size() / 2, PERSON_DATA.size())) {
            Assert.assertNull(bank1.getRemotePerson(personData.passport()));
            Assert.assertNotNull(bank2.getRemotePerson(personData.passport()));
        }
    }

    @Test
    public void twoParallelBanksOneAccountTest()
            throws IOException, NotBoundException, NegativeAccountAmountAfterOperation {
        final Bank bank1 = bank;
        setupBank();
        final Bank bank2 = bank;
        for (final var personData : PERSON_DATA) {
            bank1.createPerson(personData);
            bank2.createPerson(personData);
            for (final var accountId : ACCOUNTS) {
                final var account1 = bank1.getRemotePerson(personData.passport()).createAccount(accountId);
                final var account2 = bank2.getRemotePerson(personData.passport()).createAccount(accountId);
                checkSetAmount(account1, 10);
                Assert.assertEquals(account2.getAmount(), 0);
                checkSetAmount(account2, 20);
                Assert.assertEquals(account1.getAmount(), 10);
            }
        }
    }

    private void checkClientFail(final PersonData personData, final String accountId) throws RemoteException {
        Assert.assertNull(bank.getRemotePerson(personData.passport()));
    }

    private void checkClientOk(final PersonData personData, final String subAccountId, final int amount)
            throws RemoteException {
        final RemotePerson person = bank.getRemotePerson(personData.passport());
        Assert.assertNotNull(person);
        final Account account = person.getAccount(subAccountId);
        Assert.assertNotNull(account);
        Assert.assertEquals(account.getAmount(), amount);
    }

    /**
     * –û–¥–Ω–∞–∂–¥—ã –ö–¢-—à–Ω–∏–∫–∏ —Ä–µ—à–∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–∞–Ω–∫ "Aks—ënov Financial Transatlantic Co Ltd", –∂–∏–ª–∏-–∂–∏–ª–∏ —Å–µ–±–µ
     * —Å–ø–æ–∫–æ–π–Ω–æ, –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –≤ –∫–∞–∫–æ–π-—Ç–æ –¥–µ–Ω—å –≤ –æ—Ñ–∏—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á—ë—Ç–∞ –Ω–µ –ø—Ä–∏—à—ë–ª –Ω–µ–∫—Ç–æ ŸÉŸàÿ±ŸÜŸäŸäŸÅ ÿ¨Ÿàÿ±ÿ¨ ÿßŸÑŸÉÿ≥ŸÜÿØÿ±ŸàŸÅŸäÿ™ÿ¥
     * <p>
     * –°–Ω–∞—á–∞–ª–∞ –Ω–∞ –µ–≥–æ —Å—á–µ—Ç—É –±—ã–ª–æ 0 —Ä—É–±–ª–µ–π.
     * <p>
     * –ü–µ—Ä–µ–≤—ë–ª —Å–æ —Å–≤–æ–µ–≥–æ —Å—á—ë—Ç–∞ 100 —Ä—É–±–ª–µ–π —Å–∞–º–æ–º—É —Å–µ–±–µ
     */
    @Test
    public void test1() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        Client.main(person.firstName(), person.secondName(), person.passport(), ACCOUNTS.get(4), Integer.toString(100));
        checkClientOk(person, ACCOUNTS.get(4), 100);
    }

    /**
     * –ü–µ—Ä–µ–≤—ë–ª —Å–æ —Å–≤–æ–µ–≥–æ —Å—á—ë—Ç–∞ 999223372036854775807 —Ä—É–±–ª–µ–π —Å–∞–º–æ–º—É —Å–µ–±–µ
     */
    @Test
    public void test2() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        Client.main(person.firstName(), person.secondName(), person.passport(), ACCOUNTS.get(4),
                "999223372036854775807");
        checkClientFail(person, ACCOUNTS.get(4));
    }

    /**
     * –ü–µ—Ä–µ–≤—ë–ª 0 —Ä—É–±–ª–µ–π —Å–∞–º–æ–º—É —Å–µ–±–µ
     */
    @Test
    public void test3() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        Client.main(person.firstName(), person.secondName(), person.passport(), ACCOUNTS.get(4), "0");
        checkClientOk(person, ACCOUNTS.get(4), 0);
    }

    /**
     * –° 1000 –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∏–ª 0 —Ä—É–±–ª–µ–π —Å–∞–º–æ–º—É —Å–µ–±–µ
     */
    @Test
    public void test4() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        try (final ExecutorService executorService = Executors.newCachedThreadPool()) {
            IntStream.range(0, 1000)
                    .<Runnable>mapToObj((ignore) -> () ->
                            Client.main(person.firstName(), person.secondName(), person.passport(),
                                    ACCOUNTS.get(4), "0"))
                    .forEach(executorService::submit);
        }
        checkClientOk(person, ACCOUNTS.get(4), 0);
    }

    /**
     * –ü–µ—Ä–µ–≤—ë–ª NaN —Ä—É–±–ª–µ–π ÿ£ŸÜÿØÿ±ŸäŸá ÿ≥ÿ™ÿßŸÜŸÉŸäŸÅŸäÿ™ÿ¥
     */
    @Test
    public void test5() throws RemoteException {
        final var stankevich = new PersonData("ÿ≥ÿ™ÿßŸÜŸÉŸäŸÅŸäÿ™ÿ¥", "ÿ£ŸÜÿØÿ±ŸäŸá", "116501");
        Client.main(stankevich.firstName(), stankevich.secondName(), stankevich.passport(),
                ACCOUNTS.get(2), Float.toString(Float.NaN));
        checkClientFail(stankevich, ACCOUNTS.get(2));
    }

    /**
     * –ü–µ—Ä–µ–≤—ë–ª 100 —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –¥–æ—Ä–æ–≥—É –Ω–∞ —Ñ–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
     */
    @Test
    public void test6() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        final String account = "—á–µ—Ä–µ–∑ –¥–æ—Ä–æ–≥—É";
        Client.main(person.firstName(), person.secondName(), person.passport(), account,
                NumberFormat.getNumberInstance(Locale.forLanguageTag("fi")).format(100));
        checkClientOk(person, account, 100);
    }

    /**
     * –û–±–º–µ–Ω—è–ª undefined —Ä—É–±–ª–µ–π –Ω–∞ –¥–µ—Å—è—Ç—å ClassCastException
     */
    @Test
    public void testNull() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        final String account =  new ClassCastException().toString().repeat(10);
        Client.main(person.firstName(), person.secondName(), person.passport(),
               account,
                "undefined");
        checkClientFail(person, account);

    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —ë–∂–∏–∫–∞ –≤ —Å—Ç–∞–∫–∞–Ω–µ
     */
    @Test
    public void testMinus1() {
        Server.main("–ï–∂–∏–∫ –≤ —Å—Ç–∞–∫–∞–Ω–µ");
    }

    /**
     * null null null
     */
    @Test(expected = NullPointerException.class)
    public void testMinus2() {
        Client.main(null, null, null);
    }

    /**
     * –ö–∏–Ω—É–ª Number("100") —Ä—É–±–ª–µ–π —Å–µ–±–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
     */
    @Test
    public void test10() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        final String account = "—Ç–µ–ª–µ—Ñ–æ–Ω";
        Client.main(person.firstName(), person.secondName(), person.passport(), account,
                ((Number) 100).toString());
        checkClientOk(person, account, 100);
    }

    /**
     * –ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –∑–∞–ø–ª–∞—Ç–∏—Ç—å "1000" —Ä—É–±–ª–µ–π –∑–∞ –ñ–ö–•
     */
    @Test
    public void test11() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        final String account = "–ñ–ö–•";
        Client.main(person.firstName(), person.secondName(), person.passport(), account, "\"1000\"");
        checkClientFail(person, account);
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∞–ª –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ""'`;,.;DROP TABLE USERS"
     */
    @Test
    public void test12() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        final String account = "\"'`;,.;DROP TABLE USERS";
        Client.main(person.firstName(), person.secondName(), person.passport(), account, "0");
        checkClientOk(person, account, 0);
    }

    /**
     * –í –ø–æ–ª–µ "–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏" —É–∫–∞–∑–∞–ª kgeorgiy.info
     */
    @Test
    public void test13() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        final String account = "kgeorgiy.info";
        Client.main(person.firstName(), person.secondName(), person.passport(), account, "0");
        checkClientOk(person, account, 0);
    }


    /**
     * –í –ø–æ–ª–µ "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è" —É–∫–∞–∑–∞–ª "() -> {console.log("Georgiy Korneev");}"
     */
    @Test
    public void test14() throws RemoteException {
        final var person = PERSON_DATA.get(4);
        final String firstName = "() -> {console.log(\"Georgiy Korneev\");}";
        Client.main(firstName, person.secondName(), person.passport(),
                ACCOUNTS.get(4), "0");
        checkClientOk(person, ACCOUNTS.get(4), 0);
    }


    /**
     * –í –∫–∞—á–µ—Å—Ç–≤–µ —Å—É–º–º—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —É–∫–∞–∑–∞–ª SLEEPING_COMPARATOR.for(10000000000000LL, "ms")
     */
    @Test
    public void test15() throws RemoteException {
        final Comparator<Integer> SLEEP_COMPARATOR = (o1, o2) -> {
            try {
                Thread.sleep(100);
            } catch (final InterruptedException e) {
                e.printStackTrace();
                Thread.currentThread().interrupt();
            }
            return Integer.compare(o1, o2);
        };
        final var person = PERSON_DATA.get(4);
        Client.main(person.firstName(), person.secondName(), person.passport(),
                ACCOUNTS.get(4), SLEEP_COMPARATOR.toString());
        checkClientFail(person, ACCOUNTS.get(4));
    }

    /**
     * –ü—Ä–∏ –ø–æ–º–æ—â–∏ reflections –∏ API Excel –≤—ã–∑–≤–∞–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤—Å—Ç—Ä–æ–µ–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–æ–¥–º–µ–Ω–∏–ª –†–ê–í–ù–û–ö–ß–ï–ö —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—á–∏—Ç–∞–ª–∞
     * –Ω–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π –æ–±–ª–∏–≥–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥ –ø–æ –∫–∞–∑–Ω–∞—á–µ–π—Å–∫–æ–º—É –≤–µ–∫—Å–µ–ª—é, –∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —Ü–µ–Ω–Ω—ã–º –±—É–º–∞–≥–∞–º, –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ
     * –∫–æ—Ç–æ—Ä—ã–º –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–æ–∫ –ø–æ–≥–∞—à–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –ù–ê–ö–û–ü–î–û–•–û–î–ü–û–ì–ê–®.
     * <p>
     * –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π –±–∞–Ω–∫–∞ —Å—Ç–∞–ª–∞ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π, –∞ –ø–æ—Ç–æ–º –º–Ω–∏–º–æ–π, –∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏
     * RuntimeException –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –±–∞–Ω–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
     * <p>
     * …øo…ø…ø∆é è…øom…òM·é∏O∆öuO.«´·¥é…í|.…ív…íÍûÅ
     * <p>
     * jÃ∏ÕÅaÃ∏ÃÄvÃ¥Õù  aÃ∑Ãé.ÃµÃÜlÃµÕ†aÃ∏ÕênÃ∂ÃëgÃ∑Ãå.Ã¥ÃÑOÃ∏ uÃ∂ÃâtÃ∏ÃîOÃµÃåfÃ∂ÕÇMÃ∂ÃâeÃ∏ÃåmÃ∂ÃàoÃ¥ÃçrÃµÃá yÃ∏ÕãEÃµÃÅrÃ¥ÕårÃ¥ÃÇoÃ∑ÃÉrÃ∂Ãï
     * <p>
     * üÖπ
     */
    @Test(expected = RuntimeException.class)
    public void testR12() {
        throw new RuntimeException(bank.toString());
    }


    @FunctionalInterface
    private interface RemoteFunction<T, V> {

        V apply(T it) throws RemoteException;
    }


}
